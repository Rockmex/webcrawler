Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    -- Because invokeAll() from forkJoinPool waits until all tasks are completed to be able to continue.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

        -- Technically, 1 core parallel crawler perform the logic as the sequential crawler. However, sequential crawler
         just need to perform the reading until timeout, whereas the parallel crawler should deal with some underlying
         actions from the multithreading features(such as forkjoinpool, invoke).

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

        -- Scenario: When the core set is between 1 and the computer's cores.
           Reason:  It will perform better because the same amount of work is effectively distributed to many subtasks
           to run in parallel, whereas sequential crawler will only run from start to end by itself.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

        -- Performance profiling

    (b) What are the join points of the Profiler in the web crawler program?

        -- ProfilingMethodInterceptor class and wrap() method.


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

    -- Singleton Pattern: used in ProfilerModule class and WebCrawlerModule class.
        Pro: It can ensure that only the same instance is used throughout the program.
        Con: It makes it difficult for testings.

    -- Builder Pattern: used in CrawlTask class, CrawlResult class, and CrawlerConfiguration class
        Pro: It makes creating objects more effective when there are a lot of constructors.
        Con: It requires a lot more lines of codes.

    -- Dependency Injection Pattern: used in ProfilerImpl class, SequentialWebCrawler class, PageParserFactoryImpl class
        Pro: It makes testing more efficient.
        Con: It is difficult to debug/trace.


